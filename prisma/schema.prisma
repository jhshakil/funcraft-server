// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      UserRole   @default(CUSTOMER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  admin     Admin?
  vendor    Vendor?
  customer  Customer?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  user         User     @relation(fields: [email], references: [email])
  name         String
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt

  @@map("admins")
}

model Vendor {
  id            String      @id @default(uuid())
  email         String      @unique
  user          User        @relation(fields: [email], references: [email])
  name          String
  profilePhoto  String?
  isDeleted     Boolean     @default(false)
  contactNumber String?
  address       String?
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt
  shop          Shop?
  couponCode    CouponCode?

  @@map("vendors")
}

model Customer {
  id              String           @id @default(uuid())
  email           String           @unique
  user            User             @relation(fields: [email], references: [email])
  name            String
  profilePhoto    String?
  isDeleted       Boolean          @default(false)
  contactNumber   String?
  createdAt       DateTime         @default(now())
  updateAt        DateTime         @updatedAt
  deliveryAddress DeliveryAddress?
  order           Order[]
  review          Review?

  @@map("customers")
}

model Shop {
  id          String     @id @default(uuid())
  vendorId    String     @unique
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
  name        String
  description String?
  logo        String?
  banner      String?
  status      ShopStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  product     Product[]
  order       Order[]

  @@map("shops")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  product     Product[]

  @@map("categories")
}

model Product {
  id             String         @id @default(uuid())
  categoryId     String
  category       Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  shopId         String
  shop           Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  thumbnailImage String?
  price          Float
  inventoryCount Int
  discount       Int?
  ratting        Float?
  reviewCount    Int?
  size           String[]
  color          String[]
  isDeleted      Boolean        @default(false)
  status         ProductStatus  @default(PUBLISHED)
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  orderProduct   OrderProduct[]
  review         Review[]

  @@map("products")
}

model DeliveryAddress {
  id         String   @id @default(uuid())
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  address    String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
  order      Order[]

  @@map("deliveryAddresses")
}

model Order {
  id                String          @id @default(uuid())
  customerId        String
  customer          Customer        @relation(fields: [customerId], references: [id])
  deliveryAddressId String
  deliveryAddress   DeliveryAddress @relation(fields: [deliveryAddressId], references: [id])
  shopId            String
  shop              Shop            @relation(fields: [shopId], references: [id])
  totalPrice        Float
  orderStatus       OrderStatus     @default(PENDING)
  paymentStatus     PaymentStatus   @default(UNPAID)
  transactionId     String?
  createdAt         DateTime        @default(now())
  updateAt          DateTime        @updatedAt
  orderProduct      OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("orderProducts")
}

model Review {
  id         String   @id @default(uuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  ratting    Int
  review     String
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt

  @@map("reviews")
}

model CouponCode {
  id       String @id @default(uuid())
  code     String @unique
  discount String
  vendorId String @unique
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("couponCodes")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ShopStatus {
  ACTIVE
  BLOCKED
  DISABLE
}

enum ProductStatus {
  PUBLISHED
  DRAFT
  BLOCKED
}

enum OrderStatus {
  PENDING
  DELIVERED
  BLOCKED
  CANCEL
}

enum PaymentStatus {
  PAID
  UNPAID
}
